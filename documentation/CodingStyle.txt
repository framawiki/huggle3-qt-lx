This document is intended for huggle developers, it describes how the developers
should write the source code.

Because huggle is being developed by multiple developers we need to follow same
standard so that the code is easily readable and isn't a mess.

== C++ code ==

The source code written in C++ is formatted using the Allman (also known as ISO)
style: see https://en.wikipedia.org/wiki/Indent_style#Allman_style

Example source code:

//! This function loops Bar times and then return 0
int Foo(int Bar)
{
    if (Bar == 2)
    {
        return -2;
    }
    while (Bar > 0)
    {
        Bar--;
    }
    return 0;
}

this style has huge advantage that brackets match vertically, so that you can
easily see if starting bracket matches the ending one.  On other hand it
consumes more line than, for example K and R style.

Note: it's perfectly OK to omit brackets if they aren't needed to save space, eg:
if (blah == 6935340)
    return true;

=== Spaces ===

There is always an empty line between two functions:

int Bluh()
{
    return 0;
}

int Bleh()
{
    return 2;
}

Wrong:

int Bluh (  ) {
  return 0;
}
int Bleh ( )
{ return 2; }

=== Comments ===

Use them everywhere when you feel they should be used :-) especially for code
that may be hard to understand by others.

Every function and class should be documented according to doxygen format
http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html

Please respect code of others, don't change the code of others without
consulting that with them, there may be specific reasons why something
is written in a way it's written.

=== *pointer == nullptr ===

When comparing a pointer to nullptr you should always do

if (p != nullptr) { ... }

instead of

if (!p) { ... }

because despite the first is longer, it's clear you are working with a pointer,
from second it's not clear what data type it actually is.

NOTE: this is required since we moved to smart pointers, the comparison with
      nullptr is overloaded and if you will compare with boolean instead,
      different function is called and your code may have unexpected behaviour

it is also generally a good idea and allowed to prefix or suffix all pointers
with ptr_

== Naming ==

=== Suffixes ===

Every function member variable can be suffixed with _ so that it never collide with
instance member variables for example:

class Foo
{
    int Number;
    int Boo()
    {
        int Number_ = 5;
        return this->Number + Number_;
    }
};

You MUST NOT suffix any variable or function that is not local to ensure these names
will be available for local scope.

Prefixing with underscore is not recommended, it may lead to collisions with
standard headers or other C++ headers, keep in mind that underscore followed
by capital letter is reserved name in C / C++ and should never be used.

=== CamelCase ===

Every variable and function should be named using camel case, in case it
consists of multiple names, they are separated with underscore as well, for example:

enum SomeEnum
{
    SomeEnum_First
};

int SomeLocalVariable;
int Test = SomeEnum_First;
void ThisFunctionDoesALotOfStuff();
void *ptr_SomePointer;

class TC
{
    public:
        // Capital - it's a public function
        int Number;
    private:
        // Lower - it's a private function
        void foo();
};

IMPORTANT: leading character is capital for public variables and functions,
           it's lowercase for private functions and variables.

=== Indentations ===

Use 4 spaces, no tabs because different IDE's can handle tabs in different way

=== this->x->bla() vs x->bla() ===

If you are working with local object defined for whole class, use always
this->object so that it's clear on first sight that you aren't working with
local object (local to function) neither static object, it makes it easier to
read the code and prevent conflict with other variables or function with same
name defined globally for huggle.

Some IDE's display member variables in different color, but some IDE's don't.
Using "this" can make it clear to anyone who read the code.

Another reason for this, is that if there was ever implemented a global variable
or function with same name, it will likely not collide with your code.

=== Wrapping ===
The code should be wrapped to 160 characters, so if there is a line that has
more than 160 wrap it.

=== Order ===

In every class static functions go on first place, right after them are static
variables, then there is a space and follows constructors, destructor and
functions with variables.

Using this order in every class declaration (.hpp file) will make it easier to find
where certain stuff is. It is recommended to order everything alphabetically too.

== Exceptions ==

We are using exceptions only in situation where you want huggle to crash so
there is no graceful exception handling. You can throw exceptions but you
should never catch them. All exceptions must be derived from
Huggle::Exception.

You need to keep in mind that any code that throw an exception will make
huggle crash, so use them really only when you know that you need to crash it
at some point (dangerous situation happens that could damage something).

== Libraries ==

In order to make Huggle easy to build, we try to use as small amount of 3rd
libraries as possible. If it's inevitable to use some, make sure that it:

* Works on Linux, Mac and Windows with no issues, preferably as well as iOS
  and Android OS.
* Is maintained
* Supports C++11 and C++14
* Is open source
* Works with Qt5 and newer

Each library is packed both as git submodule and static zip file that contains
the content of library as a fallback in case that user isn't able to download
all submodules. The configure script is responsible for automatic check if
submodules are available and if they aren't, then it needs to unpack zip file.

If there is no huge need to use that 3rd library, then try to avoid it.
